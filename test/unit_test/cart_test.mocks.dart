// Mocks generated by Mockito 5.4.4 from annotations
// in final_assignment/test/unit_test/cart_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:final_assignment/core/failure/failure.dart' as _i7;
import 'package:final_assignment/features/cart/domain/entity/cart_entity.dart'
    as _i10;
import 'package:final_assignment/features/cart/domain/repository/i_cart_repository.dart'
    as _i4;
import 'package:final_assignment/features/cart/domain/usecases/cart_usecase.dart'
    as _i9;
import 'package:final_assignment/features/orders/domain/entity/order_entity.dart'
    as _i8;
import 'package:final_assignment/features/orders/domain/repository/i_order_repository.dart'
    as _i2;
import 'package:final_assignment/features/orders/domain/usecases/order_usecase.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIOrderRepository_0 extends _i1.SmartFake
    implements _i2.IOrderRepository {
  _FakeIOrderRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeICartRepository_2 extends _i1.SmartFake
    implements _i4.ICartRepository {
  _FakeICartRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OrderUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderUsecase extends _i1.Mock implements _i5.OrderUsecase {
  @override
  _i2.IOrderRepository get orderRepository => (super.noSuchMethod(
        Invocation.getter(#orderRepository),
        returnValue: _FakeIOrderRepository_0(
          this,
          Invocation.getter(#orderRepository),
        ),
        returnValueForMissingStub: _FakeIOrderRepository_0(
          this,
          Invocation.getter(#orderRepository),
        ),
      ) as _i2.IOrderRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> createOrder(
          _i8.OrderEntity? orderEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrder,
          [orderEntity],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #createOrder,
            [orderEntity],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
                _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #createOrder,
            [orderEntity],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i8.OrderEntity>>> getOrder() =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrder,
          [],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, List<_i8.OrderEntity>>>.value(
                _FakeEither_1<_i7.Failure, List<_i8.OrderEntity>>(
          this,
          Invocation.method(
            #getOrder,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, List<_i8.OrderEntity>>>.value(
                _FakeEither_1<_i7.Failure, List<_i8.OrderEntity>>(
          this,
          Invocation.method(
            #getOrder,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, List<_i8.OrderEntity>>>);
}

/// A class which mocks [CartUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartUsecase extends _i1.Mock implements _i9.CartUsecase {
  @override
  _i4.ICartRepository get cartRepository => (super.noSuchMethod(
        Invocation.getter(#cartRepository),
        returnValue: _FakeICartRepository_2(
          this,
          Invocation.getter(#cartRepository),
        ),
        returnValueForMissingStub: _FakeICartRepository_2(
          this,
          Invocation.getter(#cartRepository),
        ),
      ) as _i4.ICartRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> addToCart(
          _i10.CartEntity? cartEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToCart,
          [cartEntity],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #addToCart,
            [cartEntity],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
                _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #addToCart,
            [cartEntity],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i10.CartEntity>>> getCart() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCart,
          [],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, List<_i10.CartEntity>>>.value(
                _FakeEither_1<_i7.Failure, List<_i10.CartEntity>>(
          this,
          Invocation.method(
            #getCart,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, List<_i10.CartEntity>>>.value(
                _FakeEither_1<_i7.Failure, List<_i10.CartEntity>>(
          this,
          Invocation.method(
            #getCart,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, List<_i10.CartEntity>>>);

  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> removeFromCart(String? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromCart,
          [productId],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #removeFromCart,
            [productId],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
                _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #removeFromCart,
            [productId],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> updateQuantity(
    String? productId,
    int? quantity,
    double? price,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateQuantity,
          [
            productId,
            quantity,
            price,
          ],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #updateQuantity,
            [
              productId,
              quantity,
              price,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
                _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #updateQuantity,
            [
              productId,
              quantity,
              price,
            ],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> clearCart() => (super.noSuchMethod(
        Invocation.method(
          #clearCart,
          [],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #clearCart,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
                _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #clearCart,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> changeStatus() =>
      (super.noSuchMethod(
        Invocation.method(
          #changeStatus,
          [],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #changeStatus,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
                _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #changeStatus,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);
}
