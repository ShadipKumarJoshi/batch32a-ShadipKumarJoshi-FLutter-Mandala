// Mocks generated by Mockito 5.4.4 from annotations
// in final_assignment/test/widget_test/customize_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:dartz/dartz.dart' as _i3;
import 'package:final_assignment/core/failure/failure.dart' as _i9;
import 'package:final_assignment/features/cart/domain/entity/cart_entity.dart'
    as _i14;
import 'package:final_assignment/features/cart/domain/repository/i_cart_repository.dart'
    as _i5;
import 'package:final_assignment/features/cart/domain/usecases/cart_usecase.dart'
    as _i13;
import 'package:final_assignment/features/customize/presentation/navigator/customize_navigator.dart'
    as _i6;
import 'package:final_assignment/features/design/domain/entity/design_entity.dart'
    as _i12;
import 'package:final_assignment/features/design/domain/repository/i_design_repository.dart'
    as _i4;
import 'package:final_assignment/features/design/domain/usecases/design_usecase.dart'
    as _i11;
import 'package:final_assignment/features/sell/domain/entity/product_entity.dart'
    as _i10;
import 'package:final_assignment/features/sell/domain/repository/i_product_repository.dart'
    as _i2;
import 'package:final_assignment/features/sell/domain/usecases/product_usecase.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIProductRepository_0 extends _i1.SmartFake
    implements _i2.IProductRepository {
  _FakeIProductRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIDesignRepository_2 extends _i1.SmartFake
    implements _i4.IDesignRepository {
  _FakeIDesignRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeICartRepository_3 extends _i1.SmartFake
    implements _i5.ICartRepository {
  _FakeICartRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CustomizeViewNavigator].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomizeViewNavigator extends _i1.Mock
    implements _i6.CustomizeViewNavigator {}

/// A class which mocks [ProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductUseCase extends _i1.Mock implements _i7.ProductUseCase {
  @override
  _i2.IProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeIProductRepository_0(
          this,
          Invocation.getter(#productRepository),
        ),
        returnValueForMissingStub: _FakeIProductRepository_0(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i2.IProductRepository);

  @override
  _i8.Future<
      _i3.Either<_i9.Failure,
          List<_i10.ProductEntity>>> getAllProduct() => (super.noSuchMethod(
        Invocation.method(
          #getAllProduct,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i10.ProductEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i10.ProductEntity>>(
          this,
          Invocation.method(
            #getAllProduct,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, List<_i10.ProductEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i10.ProductEntity>>(
          this,
          Invocation.method(
            #getAllProduct,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i10.ProductEntity>>>);
}

/// A class which mocks [DesignUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDesignUseCase extends _i1.Mock implements _i11.DesignUseCase {
  @override
  _i4.IDesignRepository get designRepository => (super.noSuchMethod(
        Invocation.getter(#designRepository),
        returnValue: _FakeIDesignRepository_2(
          this,
          Invocation.getter(#designRepository),
        ),
        returnValueForMissingStub: _FakeIDesignRepository_2(
          this,
          Invocation.getter(#designRepository),
        ),
      ) as _i4.IDesignRepository);

  @override
  _i8.Future<
      _i3.Either<_i9.Failure, List<_i12.DesignEntity>>> getPaginationDesigns(
    int? page,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPaginationDesigns,
          [
            page,
            limit,
          ],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i12.DesignEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i12.DesignEntity>>(
          this,
          Invocation.method(
            #getPaginationDesigns,
            [
              page,
              limit,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, List<_i12.DesignEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i12.DesignEntity>>(
          this,
          Invocation.method(
            #getPaginationDesigns,
            [
              page,
              limit,
            ],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i12.DesignEntity>>>);

  @override
  _i8.Future<
      _i3.Either<_i9.Failure,
          List<_i12.DesignEntity>>> getAllDesigns() => (super.noSuchMethod(
        Invocation.method(
          #getAllDesigns,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i12.DesignEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i12.DesignEntity>>(
          this,
          Invocation.method(
            #getAllDesigns,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, List<_i12.DesignEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i12.DesignEntity>>(
          this,
          Invocation.method(
            #getAllDesigns,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i12.DesignEntity>>>);
}

/// A class which mocks [CartUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartUsecase extends _i1.Mock implements _i13.CartUsecase {
  @override
  _i5.ICartRepository get cartRepository => (super.noSuchMethod(
        Invocation.getter(#cartRepository),
        returnValue: _FakeICartRepository_3(
          this,
          Invocation.getter(#cartRepository),
        ),
        returnValueForMissingStub: _FakeICartRepository_3(
          this,
          Invocation.getter(#cartRepository),
        ),
      ) as _i5.ICartRepository);

  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> addToCart(
          _i14.CartEntity? cartEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToCart,
          [cartEntity],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #addToCart,
            [cartEntity],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #addToCart,
            [cartEntity],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);

  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i14.CartEntity>>> getCart() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCart,
          [],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i14.CartEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i14.CartEntity>>(
          this,
          Invocation.method(
            #getCart,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, List<_i14.CartEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i14.CartEntity>>(
          this,
          Invocation.method(
            #getCart,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i14.CartEntity>>>);

  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> removeFromCart(String? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromCart,
          [productId],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #removeFromCart,
            [productId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #removeFromCart,
            [productId],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);

  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> updateQuantity(
    String? productId,
    int? quantity,
    double? price,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateQuantity,
          [
            productId,
            quantity,
            price,
          ],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #updateQuantity,
            [
              productId,
              quantity,
              price,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #updateQuantity,
            [
              productId,
              quantity,
              price,
            ],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);

  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> clearCart() => (super.noSuchMethod(
        Invocation.method(
          #clearCart,
          [],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #clearCart,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #clearCart,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);

  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> changeStatus() =>
      (super.noSuchMethod(
        Invocation.method(
          #changeStatus,
          [],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #changeStatus,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
                _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #changeStatus,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);
}
